---
# Playbook to copy apps to different Splunk tiers based on a whitelist/blacklist pattern

# Copy temp to Individual servers
- name: Copy temp code to relevant host
  synchronize:
    src:  "{{dest_base}}/{{project}}/{{bareApps}}/{{inputTag}}-specific/temp/"
    dest: "{{dest_base}}/{{project}}/{{bareApps}}/{{inputTag}}-specific/{{hostname}}/etc/apps/"
    delete: no
  loop:
    - "{{serverList_csv_dict.dict|dict2items}}"
  vars:
    - hostname: "{{item[0].value.hostname}}"
    - hostGroup: "{{item[0].value.hostGroup}}"
    - portMapping: "{{item[0].value.portMapping}}"
    - site_id: "{{item[0].value.site_id}}"


# Clean the buildDir with privilege permissions
- name: Clean buildDir
  file:
    state: absent
    path:  "{{dest_base}}/{{project}}/{{buildDir}}"

- name: Create buildDir and apps
  file:
    mode: "u=rwx,g=rwx,o=rwx"
    state: directory
    recurse: yes
    path:  "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{item.0.hostname}}/{{item.1}}"
  with_nested:
     - "{{my_serverList}}"
     - ['etc/apps','var', 'etc/system/local', '/etc/licenses/enterprise','etc/auth/distServerKeys']

- name: Copy etc/system/local apps to each hostname
  synchronize:
      src: "{{dest_base}}/{{project}}/{{bareApps}}/{{inputTag}}-specific/{{item.hostname}}/etc/system/local"
      dest: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{item.hostname}}/etc/system/"
      recursive: yes
      delete: no
  with_items:
     - "{{my_serverList}}"

- name: List Apps based on whitelist
  find:
      paths: "{{dest_base}}/{{project}}/{{bareApps}}"
      patterns: "{{item.apps_whitelist.split('|')}}"
      file_type: directory
  with_items:
     - "{{my_appMapping}}"
  register: whitelistApps

# To reduce volume of output, just enabled no_log
- name: Copy Apps based on whitelist
  synchronize:
      src: "{{item.1.path}}"
      dest: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{item.0.item.hostname}}/etc/apps/"
      delete: yes
  with_subelements:
     - "{{whitelistApps.results}}"
     - files
  # no_log: True

- name: List Apps based on blacklist
  find:
      paths: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{item.hostname}}/etc/apps/"
      patterns: "{{item.apps_blacklist.split('|')}}"
      file_type: directory
      recurse: yes
  with_items:
     - "{{my_appMapping}}"
  register: blacklistApps

- name: Delete Apps based on blacklist
  file:
      state: absent
      path: "{{item.1.path}}"
  with_subelements:
     - "{{blacklistApps.results}}"
     - files

- name: Copy License if present, else continue
  synchronize:
      src: "{{licenseFile}}"
      dest: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{license_master_grp[0]}}/etc/licenses/enterprise/"
      recursive: yes
  when: item.hostGroup == "license_master"
  with_items:
     - "{{my_serverList}}"
  ignore_errors: yes

# cleanup temp directory to reduce confusion later
- name: Deleting Temporary directory
  file:
    path: "{{dest_base}}/{{project}}/{{bareApps}}/{{inputTag}}-specific/temp"
    state: absent
    