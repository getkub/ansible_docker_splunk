---
# Playbook to copy apps to different Splunk tiers based on a whitelist/blacklist pattern

- name: Copy apps to build directory
  synchronize:
      src: "{{dest_base}}/{{project}}/{{bareApps}}/{{inputTag}}-specific/"
      dest: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific"
      recursive: yes
      delete: no

- name: List Apps based on whitelist
  find:
      paths: "{{dest_base}}/{{project}}/{{bareApps}}/{{inputTag}}-specific/temp"
      patterns: "{{item.value.apps_whitelist.split('|')}}"
      file_type: directory
  with_items:
    - "{{appMapping_csv_dict.dict|dict2items}}"
  register: whitelistApps

# To reduce volume of output, just enabled no_log
- name: Copy Apps based on whitelist
  synchronize:
      src: "{{item.1.path}}"
      dest: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{hostname}}/etc/apps/"
      delete: no
  with_subelements:
     - "{{whitelistApps.results}}"
     - files
  vars:
    - hostname: "{{item.0.item.value.hostname}}"
  # no_log: True

# Create var directory
- name: Clean and create var directory
  file:
    state: "directory"
    path:  "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{hostname}}/var"
  with_subelements:
     - "{{whitelistApps.results}}"
     - files
  vars:
    - hostname: "{{item.0.item.value.hostname}}"

- name: List Apps based on blacklist
  find:
      paths: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{item.value.hostname}}/etc/apps/"
      patterns: "{{item.value.apps_blacklist.split('|')}}"
      file_type: directory
      recurse: yes
  with_items:
    - "{{appMapping_csv_dict.dict|dict2items}}"
  register: blacklistApps

- debug:
    msg:
      blacklistApps: "{{item.1.path}}"
  with_subelements:
     - "{{blacklistApps.results}}"
     - files

- name: Delete Apps based on blacklist
  file:
      state: absent
      path: "{{item.1.path}}"
  with_subelements:
     - "{{blacklistApps.results}}"
     - files

- name: Copy License if present, else continue
  synchronize:
      src: "{{licenseFile}}"
      dest: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/{{license_master_grp[0]}}/etc/licenses/enterprise/"
      recursive: yes
  when: item.value.hostGroup == "license_master"
  with_items:
    - "{{serverList_csv_dict.dict|dict2items}}"
  ignore_errors: yes

# cleanup temp directory to reduce confusion later
- name: Deleting Temporary directory
  file:
    path: "{{dest_base}}/{{project}}/{{buildDir}}/{{inputTag}}-specific/temp"
    state: absent
    